using Netus2_DatabaseConnection.dataObjects;
using Netus2_DatabaseConnection.dbAccess;
using System.Collections.Generic;

namespace Netus2_DatabaseConnection.daoInterfaces
{
    public interface IEmploymentSessionDao
    {
        /// <summary>
        /// Sets the taskId value to be used in "write" and "update" statements, 
        /// to indicate which process made the modification to the database in the 
        /// "created_by" and "changed_by" fields, respectively.
        /// </summary>
        /// <param name="taskId"></param>
        void SetTaskId(int taskId);

        /// <summary>
        /// Returns the taskId value, used in "write" and "update" statements, 
        /// to indicate which process made the modification to the database in the 
        /// "created_by" and "changed_by" fields, respectively.
        /// </summary>
        /// <returns>Null, if no value has been set.</returns>
        int? GetTaskId();

        /// <summary>
        /// Deletes the provided record from the database.
        /// </summary>
        /// <param name="employmentSession"></param>
        /// <param name="connection"></param>
        public void Delete(EmploymentSession employmentSession, IConnectable connection);

        /// <summary>
        /// <para>
        /// Queries the database for the records associated with the passed-in data.
        /// </para>
        /// Populates the returned records with any associated Organization records.
        /// </summary>
        /// <param name="personId"></param>
        /// <param name="connection"></param>
        /// <returns>Empty list, if no records are found.</returns>
        public List<EmploymentSession> Read_AllWithPersonId(int personId, IConnectable connection);

        /// <summary>
        /// <para>
        /// Queries the database for any records that match what is provided. Null datapoints are ignored.
        /// </para>
        /// Populates the returned records with any associated Organization records.
        /// </summary>
        /// <param name="employmentSession"></param>
        /// <param name="personId"></param>
        /// <param name="connection"></param>
        /// <returns>Empty list, if no records are found.</returns>
        public List<EmploymentSession> Read(EmploymentSession employmentSession, int personId, IConnectable connection);

        /// <summary>
        /// <para>
        /// Queries the database for the records associated with the passed-in data.
        /// </para>
        /// Populates the returned records with any associated Organization records.
        /// </summary>
        /// <param name="organizationId"></param>
        /// <param name="connection"></param>
        /// <returns>Empty list, if no records are found.</returns>
        public List<EmploymentSession> Read_AllWithOrganizationId(int organizationId, IConnectable connection);

        /// <summary>
        /// <para>
        /// Queries the database for the records associated with the passed-in data.
        /// </para>
        /// Populates the returned records with any associated Organization records.
        /// </summary>
        /// <param name="employmentSession"></param>
        /// <param name="organizationId"></param>
        /// <param name="connection"></param>
        /// <returns>Empty list, if no records are found.</returns>
        public List<EmploymentSession> Read_UsingOrganizationId(EmploymentSession employmentSession, int organizationId, IConnectable connection);

        /// <summary>
        /// Checks to see if the provided data is associated to any record currently in the database.
        /// If not, then writes this record to the database.
        /// If so, then updates the database record to match this object.
        /// </summary>
        /// <param name="employmentSession"></param>
        /// <param name="personId"></param>
        /// <param name="connection"></param>
        public void Update(EmploymentSession employmentSession, int personId, IConnectable connection);

        /// <summary>
        /// <para>
        /// Writes the provided record to the database.
        /// </para>
        /// Populates the returned record with any associated Organization records.
        /// </summary>
        /// <param name="employmentSession"></param>
        /// <param name="personId"></param>
        /// <param name="connection"></param>
        /// <returns>A copy of the record that was written, including the object Id, generated by the database.</returns>
        public EmploymentSession Write(EmploymentSession employmentSession, int personId, IConnectable connection);
    }
}
